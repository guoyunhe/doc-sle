# SOME DESCRIPTIVE TITLE.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2017-01-20 18:23+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <kde-i18n-doc@kde.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: art_kgraft.xml:14
#, no-c-format
msgid "Live Kernel Patching Using &kg;"
msgstr ""

#. Tag: subtitle
#: art_kgraft.xml:15
#, no-c-format
msgid "&productname; &productnumber;"
msgstr ""

#. Tag: para
#: art_kgraft.xml:24
#, no-c-format
msgid ""
"This document describes the basic principles of the &kg; live patching "
"technology and provides usage guidelines for the SLE Live Patching service."
msgstr ""

#. Tag: para
#: art_kgraft.xml:29
#, no-c-format
msgid ""
"&kg; is a live patching technology for runtime patching of the Linux kernel, "
"without stopping the kernel. This maximizes system uptime, and thus system "
"availability, which is important for mission-critical systems. By allowing "
"dynamic patching of the kernel, the technology also encourages users to "
"install critical security updates without deferring them to a scheduled "
"downtime."
msgstr ""

#. Tag: para
#: art_kgraft.xml:37
#, no-c-format
msgid ""
"A &kg; patch is a kernel module, intended for replacing whole functions in "
"the kernel. &kg; primarily offers in-kernel infrastructure for integration "
"of the patched code with base kernel code at runtime."
msgstr ""

#. Tag: para
#: art_kgraft.xml:43
#, no-c-format
msgid ""
"SLE Live Patching is a service provided on top of regular SUSE Linux "
"Enterprise Server maintenance. &kg; patches distributed through SLE Live "
"Patching supplement regular SLES maintenance updates. Common update stack "
"and procedures can be used for SLE Live Patching deployment."
msgstr ""

#. Tag: title
#: art_kgraft.xml:53
#, no-c-format
msgid "Advantages of &kg;"
msgstr ""

#. Tag: para
#: art_kgraft.xml:55
#, no-c-format
msgid ""
"Live kernel patching using &kg; is especially useful for quick response in "
"emergencies (when serious vulnerabilities are known and should be fixed when "
"possible or there are serious system stability issues with a known fix). It "
"is not used for scheduled updates where time is not critical."
msgstr ""

#. Tag: para
#: art_kgraft.xml:63
#, no-c-format
msgid ""
"Typical use cases for &kg; include systems like memory databases with huge "
"amounts of RAM, where boot-up times of 15 minutes or more are no exception, "
"large simulations that need weeks or months without a restart, or "
"infrastructure building blocks providing continuous service to a large "
"number of consumers."
msgstr ""

#. Tag: para
#: art_kgraft.xml:71
#, no-c-format
msgid ""
"The main advantage of &kg; is that it never requires stopping the kernel, "
"not even for a short time period."
msgstr ""

#. Tag: para
#: art_kgraft.xml:76
#, no-c-format
msgid ""
"A &kg; patch is a <filename>.ko</filename> kernel module in a KMP RPM "
"package. It is inserted into the kernel using the <command>insmod</command> "
"command when the RPM package is installed or updated. &kg; replaces whole "
"functions in the kernel, even if they are being executed. An updated &kg; "
"module can replace an existing patch if necessary."
msgstr ""

#. Tag: para
#: art_kgraft.xml:85
#, no-c-format
msgid ""
"&kg; is also lean&mdash;it contains only a small amount of code, because it "
"leverages other standard Linux technologies."
msgstr ""

#. Tag: title
#: art_kgraft.xml:91
#, no-c-format
msgid "Low-level Function of &kg;"
msgstr ""

#. Tag: para
#: art_kgraft.xml:93
#, no-c-format
msgid ""
"&kg; uses the ftrace infrastructure to perform patching. The following "
"describes the implementation on the x86-64 architecture."
msgstr ""

#. Tag: para
#: art_kgraft.xml:98
#, no-c-format
msgid ""
"To patch a kernel function, &kg; needs some space at the start of the "
"function to insert a jump to a new function. This space is allocated during "
"kernel compilation by GCC with function profiling turned on. In particular, "
"a 5-byte call instruction is injected to the start of kernel functions. When "
"such instrumented kernel is booting, profiling calls are replaced by 5-byte "
"NOP (no operation) instructions."
msgstr ""

#. Tag: para
#: art_kgraft.xml:107
#, no-c-format
msgid ""
"After patching starts, the first byte is replaced by the INT3 (breakpoint) "
"instruction. This ensures atomicity of the 5-byte instruction replacement. "
"The other four bytes are replaced by the address to the new function. "
"Finally, the first byte is replaced by the JMP (long jump) opcode."
msgstr ""

#. Tag: para
#: art_kgraft.xml:115
#, no-c-format
msgid ""
"Inter-processor non-maskable interrupts (IPI NMI) are used throughout the "
"process to flush speculative decoding queues of other CPUs in the system. "
"This allows switching to the new function without ever stopping the kernel, "
"not even for a very short moment. The interruptions by IPI NMIs can be "
"measured in microseconds and are not considered service interruptions as "
"they happen while the kernel is running in any case."
msgstr ""

#. Tag: para
#: art_kgraft.xml:124
#, no-c-format
msgid ""
"Callers are never patched. Instead, callees' NOPs are replaced by a JMP to "
"the new function. JMP instructions remain forever. This takes care of "
"function pointers, including in structures, and does not require saving any "
"old data for the possibility of un-patching."
msgstr ""

#. Tag: para
#: art_kgraft.xml:131
#, no-c-format
msgid ""
"However, these steps alone would not be good enough: since the functions "
"would be replaced non-atomically, a new fixed function in one part of the "
"kernel could still be calling an old function elsewhere or vice versa. If "
"the semantics of the function interfaces changed in the patch, chaos would "
"ensue."
msgstr ""

#. Tag: para
#: art_kgraft.xml:139
#, no-c-format
msgid ""
"Thus, until all functions are replaced, &kg; uses an approach based on "
"trampolines and similar to RCU (read-copy-update), to ensure a consistent "
"view of the world to each user space thread, kernel thread and kernel "
"interrupt. A per-thread flag is set on each kernel entry and exit. This way, "
"an old function would always call another old function and a new function "
"always a new one. Once all processes have the \"new universe\" flag set, "
"patching is complete, trampolines can be removed and the code can operate at "
"full speed without performance impact other than an extra-long jump for each "
"patched function."
msgstr ""

#. Tag: title
#: art_kgraft.xml:152
#, no-c-format
msgid "Installing &kg; Patches"
msgstr ""

#. Tag: para
#: art_kgraft.xml:154
#, no-c-format
msgid ""
"This section describes the activation of the SUSE Linux Enterprise Live "
"Patching extension and the installation of &kg; patches."
msgstr ""

#. Tag: title
#: art_kgraft.xml:160
#, no-c-format
msgid "Activation of SLE Live Patching"
msgstr ""

#. Tag: para
#: art_kgraft.xml:161
#, no-c-format
msgid "To activate SLE Live Patching on your system, follow these steps:"
msgstr ""

#. Tag: para
#: art_kgraft.xml:166
#, no-c-format
msgid ""
"If your SLES system is not yet registered, register it. Registration can be "
"done during the system installation or later using the &yast; "
"<guimenu>Product Registration</guimenu> module (<command>yast2 registration</"
"command>). After registration, click <guimenu>Yes</guimenu> to see the list "
"of available online updates."
msgstr ""

#. Tag: para
#: art_kgraft.xml:173
#, no-c-format
msgid ""
"If your SLES system is already registered, but SLE Live Patching is not yet "
"activated, open the &yast; <guimenu>Product Registration</guimenu> module "
"(<command>yast2 registration</command>) and click <guimenu>Select "
"Extensions</guimenu>."
msgstr ""

#. Tag: para
#: art_kgraft.xml:181
#, no-c-format
msgid ""
"Select <guimenu>SUSE Linux Enterprise Live Patching 12</guimenu> in the list "
"of available extensions and click <guimenu>Next</guimenu>."
msgstr ""

#. Tag: para
#: art_kgraft.xml:187
#, no-c-format
msgid "Confirm the license terms and click <guimenu>Next</guimenu>."
msgstr ""

#. Tag: para
#: art_kgraft.xml:192
#, no-c-format
msgid ""
"Enter the SLE Live Patching registration code and click <guimenu>Next</"
"guimenu>."
msgstr ""

#. Tag: para
#: art_kgraft.xml:198
#, no-c-format
msgid ""
"Check the <guimenu>Installation Summary</guimenu> and selected "
"<guimenu>Patterns</guimenu>. The pattern <systemitem>Live Patching</"
"systemitem> should be selected for installation."
msgstr ""

#. Tag: para
#: art_kgraft.xml:205
#, no-c-format
msgid ""
"Click <guimenu>Accept</guimenu> to complete the installation. This will "
"install the base &kg; components on your system together with the initial "
"live patch."
msgstr ""

#. Tag: title
#: art_kgraft.xml:215
#, no-c-format
msgid "Updating System"
msgstr ""

#. Tag: para
#: art_kgraft.xml:218
#, no-c-format
msgid ""
"SLE Live Patching updates are distributed in a form that allows using "
"standard SLE update stack for patch application. The initial live patch can "
"be updated using <command>zypper patch</command>, YaST2 Online Update or "
"equivalent method."
msgstr ""

#. Tag: para
#: art_kgraft.xml:226
#, no-c-format
msgid ""
"The kernel is patched automatically during the package installation. "
"However, invocations of the old kernel functions are not completely "
"eliminated until all sleeping processes wake up and get out of the way. This "
"can take a considerable amount of time. Despite this, sleeping processes "
"that use the old kernel functions are not considered a security issue. "
"Nevertheless, in the current version of &kg;, it is not possible to apply "
"another &kg; patch until all processes cross the kernel space to user space "
"boundary to use patched functions from the previous patch."
msgstr ""

#. Tag: para
#: art_kgraft.xml:237
#, no-c-format
msgid ""
"To see the global status of patching, check the flag in <filename>/sys/"
"kernel/kgraft/in_progress</filename>. The value <literal>1</literal> "
"signifies the existence of sleeping processes that still need to be woken "
"(the patching is still in progress). The value <literal>0</literal> "
"signifies that all processes are using solely the patched functions and "
"patching has finished already. Alternatively, use the <command>kgr status</"
"command> command to obtain the same information."
msgstr ""

#. Tag: para
#: art_kgraft.xml:247
#, no-c-format
msgid ""
"The flag can be checked on a per-process basis too. Check the number in "
"<filename>/proc/<replaceable>process_number</replaceable>/kgr_in_progress</"
"filename> for each process individually. Again, the value <literal>1</"
"literal> signifies sleeping process that still needs to be woken. "
"Alternatively, use the <command>kgr blocking</command> command to output the "
"list of sleeping processes."
msgstr ""

#. Tag: para
#: art_kgraft.xml:258
#, no-c-format
msgid ""
"It is up to the system administrator to decide how to deal with the sleeping "
"processes. One possibility is to wait, another possibility is to send a "
"SIGSTOP signal followed by a SIGCONT signal to all the sleeping processes. "
"It can be achieved easily using the <command>kgr poke</command> command. "
"Running processes are not interrupted."
msgstr ""

#. Tag: title
#: art_kgraft.xml:272
#, no-c-format
msgid "Removing a &kg; Patch"
msgstr ""

#. Tag: para
#: art_kgraft.xml:274
#, no-c-format
msgid "To remove a &kg; patch, use the following procedure:"
msgstr ""

#. Tag: para
#: art_kgraft.xml:287
#, no-c-format
msgid "First remove the patch itself using zypper:"
msgstr ""

#. Tag: screen
#: art_kgraft.xml:290
#, no-c-format
msgid "zypper rm kgraft-patch-<replaceable>3_12_32-25-default</replaceable>"
msgstr ""

#. Tag: para
#: art_kgraft.xml:293
#, no-c-format
msgid "Then reboot the machine."
msgstr ""

#. Tag: title
#: art_kgraft.xml:300
#, no-c-format
msgid "Stuck Kernel Execution Threads"
msgstr ""

#. Tag: para
#: art_kgraft.xml:302
#, no-c-format
msgid ""
"Kernel threads need to be prepared to handle &kg;. Third-party software may "
"not be completely ready for &kg; adoption and its kernel modules may spawn "
"kernel execution threads. These threads will block the patching process "
"indefinitely. As an emergency measure &kg; offers the possibility to force "
"finishing of the patching process without waiting for all execution threads "
"to cross the safety checkpoint. This can be achieved by writing <literal>0</"
"literal> into <filename>/sys/kernel/kgraft/in_progress</filename>. Consult "
"SUSE Support before performing this procedure."
msgstr ""

#. Tag: title
#: art_kgraft.xml:331
#, no-c-format
msgid "The <command>kgr</command> Tool"
msgstr ""

#. Tag: para
#: art_kgraft.xml:333
#, no-c-format
msgid ""
"Several &kg; management tasks can be simplified with the <command>kgr</"
"command> tool. The available commands are:"
msgstr ""

#. Tag: command
#: art_kgraft.xml:340
#, no-c-format
msgid "kgr status"
msgstr ""

#. Tag: para
#: art_kgraft.xml:343
#, no-c-format
msgid ""
"Displays the overall status of &kg; patching (<literal>ready</literal> or "
"<literal>in_progress</literal>)."
msgstr ""

#. Tag: command
#: art_kgraft.xml:352
#, no-c-format
msgid "kgr patches"
msgstr ""

#. Tag: para
#: art_kgraft.xml:355
#, no-c-format
msgid "Displays the list of loaded &kg; patches."
msgstr ""

#. Tag: command
#: art_kgraft.xml:361
#, no-c-format
msgid "kgr blocking"
msgstr ""

#. Tag: para
#: art_kgraft.xml:364
#, no-c-format
msgid ""
"Lists processes that are preventing &kg; patching from finishing. By default "
"just the PIDs are listed. Specifying <option>-v</option> prints out command "
"lines if available. Another <option>-v</option> displays also stack traces."
msgstr ""

#. Tag: command
#: art_kgraft.xml:373
#, no-c-format
msgid "kgr poke"
msgstr ""

#. Tag: para
#: art_kgraft.xml:376
#, no-c-format
msgid ""
"Sends SIGSTOP and SIGCONT to all processess that are blocking &kg; patching "
"from finishing."
msgstr ""

#. Tag: para
#: art_kgraft.xml:384
#, no-c-format
msgid "For detailed information, see <command>man kgr</command>."
msgstr ""

#. Tag: title
#: art_kgraft.xml:389
#, no-c-format
msgid "Scope of &kg; Technology"
msgstr ""

#. Tag: para
#: art_kgraft.xml:391
#, no-c-format
msgid ""
"&kg; is based on replacing functions. Data structure alteration can be "
"accomplished only indirectly with &kg;. As a result, changes to kernel data "
"structure require special care and, if the change is too large, rebooting "
"might be required. &kg; also might not be able to handle situations where "
"one compiler is used to compile the old kernel and another compiler is used "
"for compiling the patch."
msgstr ""

#. Tag: para
#: art_kgraft.xml:400
#, no-c-format
msgid ""
"Because of the way &kg; works, support for third-party modules that are "
"spawning kernel threads is limited."
msgstr ""

#. Tag: title
#: art_kgraft.xml:409
#, no-c-format
msgid "Scope of SLE Live Patching"
msgstr ""

#. Tag: para
#: art_kgraft.xml:411
#, no-c-format
msgid ""
"Fixes for SUSE CVSS (Common Vulnerability Scoring System) level 6+ "
"vulnerabilities and bug fixes related to system stability or data corruption "
"will be shipped in the scope of SLE Live Patching. It might not be possible "
"to produce a live patch for all kinds of fixes fulfilling the above "
"criteria. SUSE reserves the right to skip fixes where production of a kernel "
"live patch is unviable because of technical reasons. For more information on "
"CVSS, which is the base for the SUSE CVSS rating, see <link xlink:href="
"\"http://nvd.nist.gov/cvss.cfm/\"></link>."
msgstr ""

#. Tag: title
#: art_kgraft.xml:422
#, no-c-format
msgid "Interaction with the Support Processes"
msgstr ""

#. Tag: para
#: art_kgraft.xml:424
#, no-c-format
msgid ""
"In the course of resolving a technical difficulty with SUSE Support, you may "
"receive a so-called Program Temporary Fix (PTF). PTFs may be issued for "
"various packages including those forming the base of SLE Live Patching."
msgstr ""

#. Tag: para
#: art_kgraft.xml:431
#, no-c-format
msgid ""
"&kg; PTFs complying with the conditions described in the previous section "
"can be installed as usual and SUSE will ensure that the system in question "
"does not need to be rebooted and that future live updates are applied "
"cleanly."
msgstr ""

#. Tag: para
#: art_kgraft.xml:438
#, no-c-format
msgid ""
"PTFs issued for the base kernel disrupt the live patching process. First, "
"installing the PTF kernel means a reboot as the kernel cannot be replaced as "
"a whole at runtime. Second, another reboot is needed to replace the PTF with "
"any regular maintenance updates for which the live patches are issued."
msgstr ""

#. Tag: para
#: art_kgraft.xml:446
#, no-c-format
msgid ""
"PTFs for other packages in SLE Live Patching can be treated like regular "
"PTFs with the usual guarantees."
msgstr ""
