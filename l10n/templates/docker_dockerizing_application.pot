# SOME DESCRIPTIVE TITLE.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2017-01-20 18:23+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <kde-i18n-doc@kde.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: docker_dockerizing_application.xml:9
#, no-c-format
msgid "Dockerizing Applications"
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:10
#, no-c-format
msgid ""
"Docker is a technology that can help you to minimize resources used to run "
"or build your applications. There are several types of applications that are "
"suitable to run inside a Docker container like daemons, Web pages or "
"applications that expose ports for communication. You can use Docker for "
"automation of building and deployment processes by adding the build process "
"into a docker image, then building the image and then running containers "
"based on that image."
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:13
#, no-c-format
msgid ""
"Running your application inside a docker container provides you with the "
"following advantages:"
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:18
#, no-c-format
msgid ""
"You can minimize the runtime environment of the application as you can add "
"to the docker image of the application just the required processes and "
"applications."
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:23
#, no-c-format
msgid ""
"The image with your application is portable across machines also with "
"different Linux host systems."
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:28
#, no-c-format
msgid "You can share the image of your application by using a repository."
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:33
#, no-c-format
msgid ""
"You can use different versions of required packages in the container than "
"the host system uses without having problems with dependencies."
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:38
#, no-c-format
msgid ""
"You can run several instances of the same application that are completely "
"independent from each other."
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:43
#, no-c-format
msgid ""
"Using Docker for building of applications provides the following features:"
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:48
#, no-c-format
msgid "You can prepare a complete building image."
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:53
#, no-c-format
msgid "Your build always runs in the same environment."
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:58
#, no-c-format
msgid ""
"Your developers can test their code in the same environment as used in "
"production."
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:63
#, no-c-format
msgid "You can set up an automated building process."
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:68
#, no-c-format
msgid ""
"The following section provides you with examples and tips on how to "
"dockerize your applications. Prior to reading further, make sure that you "
"have activated your &slsa; base docker image as described in <xref linkend="
"\"Building_Pre-build_Images\"/>."
msgstr ""

#. Tag: title
#: docker_dockerizing_application.xml:72
#, no-c-format
msgid "Running an Application with Specific Package Versions"
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:73
#, no-c-format
msgid ""
"You may face a problem that your application uses a specific version of a "
"package that is different from the package installed on the system that "
"should run your application. You can modify your application to work with "
"another version or you may create a Docker image with that particular "
"package version. The following example of a <filename>Dockerfile</filename> "
"shows an image based on a current version of &slsa; but with an older "
"version of the <literal>example</literal> package"
msgstr ""

#. Tag: screen
#: docker_dockerizing_application.xml:76
#, no-c-format
msgid ""
"FROM suse/sles12:latest\n"
"                MAINTAINER Tux\n"
"\n"
"                RUN zypper ref &amp;&amp; zypper in -f example-1.0.0-0\n"
"                COPY application.rpm /tmp/\n"
"\n"
"                RUN zypper --non-interactive in /tmp/application.rpm\n"
"\n"
"                ENTRYPOINT [\"/etc/bin/application\"]\n"
"\n"
"                CMD [\"-i\"]"
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:77
#, no-c-format
msgid ""
"Now you can build the image by running in the same directory as the "
"<filename>Dockerfile</filename> resides:"
msgstr ""

#. Tag: screen
#: docker_dockerizing_application.xml:80
#, no-c-format
msgid "docker build --tag tux_application:latest ."
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:81
#, no-c-format
msgid ""
"The <filename>Dockerfile</filename> examples shown above performs the "
"following operations during the <command>docker build</command>:"
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:86
#, no-c-format
msgid "Updates the &slsa; repositories."
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:91
#, no-c-format
msgid "Installs the desired version of the <literal>example</literal> package."
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:96
#, no-c-format
msgid ""
"Copies your application package to the image. The source RPM must be placed "
"in the build context."
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:101
#, no-c-format
msgid "Unpacks your application."
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:106
#, no-c-format
msgid "The last two steps run your application after a container is started."
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:112
#, no-c-format
msgid ""
"After a successful build of the <literal>tux_application</literal> image, "
"you can start a container based on your new image:"
msgstr ""

#. Tag: screen
#: docker_dockerizing_application.xml:115
#, no-c-format
msgid "docker run -it --name application_instance tux_application:latest"
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:116
#, no-c-format
msgid ""
"You have created a container that runs a single instance of your "
"application. Bear in mind that after closing the application, the Docker "
"container exits as well."
msgstr ""

#. Tag: title
#: docker_dockerizing_application.xml:122
#, no-c-format
msgid "Running Applications with Specific Configuration"
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:123
#, no-c-format
msgid ""
"You may need to run an application that is delivered in a standard package "
"accessible through &slsa; repositories but you may need to use a different "
"configuration or use specific environment variables. In case you would like "
"to run several instances of the application with non-standard configuration, "
"you can create your own image that will pass the custom configuration to the "
"application."
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:126
#, no-c-format
msgid "An example with the <emphasis>example</emphasis> application follows:"
msgstr ""

#. Tag: screen
#: docker_dockerizing_application.xml:129
#, no-c-format
msgid ""
"FROM suse/sles12:latest\n"
"\n"
"                RUN zypper ref &amp;&amp; zypper --non-interactive in "
"example\n"
"\n"
"                ENV BACKUP=/backup\n"
"\n"
"                RUN mkdir -p $BACKUP\n"
"                COPY configuration_example /etc/example/\n"
"\n"
"                ENTRYPOINT [\"/etc/bin/example\"]"
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:130
#, no-c-format
msgid ""
"The above example <filename>Dockerfile</filename> results in the following "
"operations:"
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:135
#, no-c-format
msgid ""
"Refreshing of repositories and installation of the <emphasis>example</"
"emphasis>."
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:140
#, no-c-format
msgid ""
"Sets a <literal>BACKUP</literal> environment variable (the variable persists "
"to containers started from the image). You can always overwrite the value of "
"the variable with a new one while running the container by specifying a new "
"value."
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:145
#, no-c-format
msgid "Creates the directory <literal>/backup</literal>."
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:150
#, no-c-format
msgid "Copies the <filename>configuration_example</filename> to the image."
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:155
#, no-c-format
msgid "Runs the <emphasis>example</emphasis> application."
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:160
#, no-c-format
msgid ""
"Now you can build the image and after a successful build, you can run a "
"container based on your image."
msgstr ""

#. Tag: title
#: docker_dockerizing_application.xml:165
#, no-c-format
msgid "Sharing Data Between an Application and the Host System"
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:166
#, no-c-format
msgid ""
"You may run an application that needs to share data between the "
"application's container and the host file system. Docker enables you to do "
"data sharing by using volumes. You can declare a mount point directly in the "
"<filename>Dockerfile</filename>. But you cannot specify a directory on the "
"host system in the <filename>Dockerfile</filename> as the directory may not "
"be accessible at the build time. You can find the mounted directory in the "
"<literal>/var/lib/docker/volumes/</literal> directory on the host system."
msgstr ""

#. Tag: title
#: docker_dockerizing_application.xml:170
#, no-c-format
msgid "Discarding Changes to the Directory to Be Shared"
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:171
#, no-c-format
msgid ""
"After you declare a mount point by using the <literal>VOLUME</literal> "
"instruction, all your changes performed (by using the <literal>RUN</literal> "
"instruction) to the directory will be discarded. After the declaration, the "
"volume is part of a temporary container that is then removed after a "
"successful build. In case you need to e.g. change permissions, perform the "
"change before you declare the directory as a mount point in the "
"<filename>Dockerfile</filename>."
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:175
#, no-c-format
msgid ""
"You can specify a particular mount point on the host system when running a "
"container by using the <literal>-v</literal> option:"
msgstr ""

#. Tag: screen
#: docker_dockerizing_application.xml:178
#, no-c-format
msgid ""
"docker run -it --name testing -v /home/tux/data:/data sles12:latest /bin/bash"
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:180
#, no-c-format
msgid ""
"Using the <literal>-v</literal> option overwrites the <literal>VOLUME</"
"literal> instruction if you specify the same mount point in the container."
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:184
#, no-c-format
msgid ""
"Now let's create an example image with a Web server that will read Web "
"content from the host's file system. The <filename>Dockerfile</filename> "
"could look as follows:"
msgstr ""

#. Tag: screen
#: docker_dockerizing_application.xml:187
#, no-c-format
msgid ""
"FROM suse/sles12:latest\n"
"\n"
"                RUN zypper ref &amp;&amp; zypper --non-interactive in "
"apache2\n"
"\n"
"                COPY apache2 /etc/sysconfig/\n"
"\n"
"                RUN chown -R admin /data\n"
"\n"
"                EXPOSE 80\n"
"\n"
"                VOLUME /data\n"
"\n"
"                ENTRYPOINT [\"apache2ctl\"]"
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:188
#, no-c-format
msgid ""
"The example above installs the Apache Web server to the image and copies all "
"your configuration to the image. The <literal>data</literal> directory will "
"be owned by the <emphasis>admin</emphasis> user and will be used as a mount "
"point to store your web pages."
msgstr ""

#. Tag: title
#: docker_dockerizing_application.xml:193
#, no-c-format
msgid "Applications Running in the Background"
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:194
#, no-c-format
msgid ""
"Your application may need to run in the background as a daemon or as an "
"application exposing ports for communication. In that case a typical Docker "
"container may be run in background. Do not run your application in the "
"container in the background as it may cause exiting of the container. Run "
"the container in the background instead. An example <filename>Dockerfile</"
"filename> for an application exposing a port looks as follows:"
msgstr ""

#. Tag: screen
#: docker_dockerizing_application.xml:197
#, no-c-format
msgid ""
"FROM suse/sles12:latest\n"
"\n"
"                RUN zypper ref &amp;&amp; zypper --non-interactive in "
"postfix\n"
"                RUN mkdir -p /var/spool/mail\n"
"\n"
"                COPY main.cf /etc/postfix/main.cf\n"
"\n"
"                EXPOSE 25 587\n"
"\n"
"                VOLUME [\"/var/spool/mail\"]\n"
"                ENTRYPOINT [\"/usr/sbin/postfix\"]"
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:198
#, no-c-format
msgid ""
"Now you can build your image. Docker performs the following operations "
"according to the instructions in the <filename>Dockerfile</filename>:"
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:203
#, no-c-format
msgid ""
"Docker refreshes repositories and installs the <emphasis>postfix</emphasis> "
"mail server as it is not installed by default in the &slsa; docker image."
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:208
#, no-c-format
msgid ""
"The <literal>/var/spool/mailboxes</literal> directory is created in the file "
"system of the image. The directory will store all mailboxes if you configure "
"the mail server to store data in this directory."
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:213
#, no-c-format
msgid ""
"Here you copy a configuration file to the particular directory. Make sure "
"that the <filename>main.cf</filename> is located in the same directory as "
"the <filename>Dockerfile</filename>. Bear in mind that the configuration "
"will be the same for all instance run in the future. In case you need a "
"different configuration for each container, you will need to edit it after "
"running the container."
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:219
#, no-c-format
msgid ""
"Each started container will expose the ports: <emphasis>25</emphasis> and "
"<emphasis>587</emphasis>. In case you will run several instances of this "
"image on the same machine, you should define a specific host name for each "
"container."
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:224
#, no-c-format
msgid ""
"The <literal>VOLUME</literal> instruction creates a mount point at the "
"<filename>/var/spool/mail</filename> directory in the container."
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:229
#, no-c-format
msgid ""
"The last instructions runs the <literal>postfix</literal> mail server in the "
"started container."
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:234
#, no-c-format
msgid "After a successful build, you can run a container based on the image:"
msgstr ""

#. Tag: screen
#: docker_dockerizing_application.xml:237
#, no-c-format
msgid ""
"docker run -d --name mail_server -v /var/spool/mail:/var/spool/mail postfix:"
"latest /bin/bash"
msgstr ""

#. Tag: para
#: docker_dockerizing_application.xml:238
#, no-c-format
msgid ""
"The <literal>-d</literal> option runs the container in a detached mode and "
"further communication by using the CLI will not be possible. To reattach the "
"container run:"
msgstr ""

#. Tag: screen
#: docker_dockerizing_application.xml:241
#, no-c-format
msgid "docker attach &lt;container identification&gt;"
msgstr ""
