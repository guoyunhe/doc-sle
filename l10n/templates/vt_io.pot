# SOME DESCRIPTIVE TITLE.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2017-01-20 18:23+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <kde-i18n-doc@kde.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: vt_io.xml:9
#, no-c-format
msgid "I/O Virtualization"
msgstr ""

#. Tag: para
#: vt_io.xml:17
#, no-c-format
msgid ""
"&vmguest;s not only share CPU and memory resources of the host system, but "
"also the I/O subsystem. Because software I/O virtualization techniques "
"deliver less performance than bare metal, hardware solutions that deliver "
"almost <quote>native</quote> performance have been developed recently. "
"&productname; supports the following I/O virtualization techniques:"
msgstr ""

#. Tag: term
#: vt_io.xml:27
#, no-c-format
msgid "Full Virtualization"
msgstr ""

#. Tag: para
#: vt_io.xml:29
#, no-c-format
msgid ""
"Fully Virtualized (FV) drivers emulate widely supported real devices, which "
"can be used with an existing driver in the &vmguest;. The guest is also "
"called <emphasis>Hardware Virtual Machine</emphasis> (HVM). Since the "
"physical device on the &vmhost; may differ from the emulated one, the "
"hypervisor needs to process all I/O operations before handing them over to "
"the physical device. Therefore all I/O operations need to traverse two "
"software layers, a process that not only significantly impacts I/O "
"performance, but also consumes CPU time."
msgstr ""

#. Tag: term
#: vt_io.xml:42
#, no-c-format
msgid "Paravirtualization"
msgstr ""

#. Tag: para
#: vt_io.xml:44
#, no-c-format
msgid ""
"Paravirtualization (PV) allows direct communication between the hypervisor "
"and the &vmguest;. With less overhead involved, performance is much better "
"than with full virtualization. However, paravirtualization requires either "
"the guest operating system to be modified to support the paravirtualization "
"API or paravirtualized drivers. <phrase os=\"sles;sled\">See <xref linkend="
"\"sec.kvm.requires.guests.virt_drivers\"/> for a list of guest operating "
"systems supporting paravirtualization.</phrase>"
msgstr ""

#. Tag: term
#: vt_io.xml:57
#, no-c-format
msgid "PVHVM"
msgstr ""

#. Tag: para
#: vt_io.xml:59
#, no-c-format
msgid ""
"This type of virtualization enhances HVM (see <xref linkend=\"vt.io.fullv\"/"
">) with paravirtualized (PV) drivers, and PV interrupt and timer handling."
msgstr ""

#. Tag: term
#: vt_io.xml:67
#, no-c-format
msgid "VFIO"
msgstr ""

#. Tag: para
#: vt_io.xml:69
#, no-c-format
msgid ""
"VFIO stands for <emphasis>Virtual Function I/O</emphasis> and is a new user-"
"level driver framework for Linux. It replaces the traditional &kvm; "
"&pciback; device assignment. The VFIO driver exposes direct device access to "
"user space in a secure memory (<xref linkend=\"gloss.vt.acronym.iommu\"/>) "
"protected environment. With VFIO, a &vmguest; can directly access hardware "
"devices on the &vmhost; (pass-through), avoiding performance issues caused "
"by emulation in performance critical paths. This method does not allow to "
"share devices&mdash;each device can only be assigned to a single &vmguest;. "
"VFIO needs to be supported by the &vmhost; CPU, chipset and the BIOS/EFI."
msgstr ""

#. Tag: para
#: vt_io.xml:82
#, no-c-format
msgid ""
"Compared to the legacy &kvm; PCI device assignment, VFIO has the following "
"advantages:"
msgstr ""

#. Tag: para
#: vt_io.xml:88
#, no-c-format
msgid "Resource access is compatible with secure boot."
msgstr ""

#. Tag: para
#: vt_io.xml:93
#, no-c-format
msgid "Device is isolated and its memory access protected."
msgstr ""

#. Tag: para
#: vt_io.xml:98
#, no-c-format
msgid ""
"Offers a user space device driver with more flexible device ownership model."
msgstr ""

#. Tag: para
#: vt_io.xml:104
#, no-c-format
msgid ""
"Is independent of &kvm; technology, and not bound to x86 architecture only."
msgstr ""

#. Tag: para
#: vt_io.xml:110
#, no-c-format
msgid ""
"As of <phrase os=\"sles;sled\">&sls; 12 SP2</phrase><phrase os=\"osuse"
"\">openSUSE 42.2</phrase>, the USB and PCI Pass-through methods of device "
"assignment are considered deprecated and were superseded by the VFIO model."
msgstr ""

#. Tag: term
#: vt_io.xml:119
#, no-c-format
msgid "SR-IOV"
msgstr ""

#. Tag: para
#: vt_io.xml:121
#, no-c-format
msgid ""
"The latest I/O virtualization technique, Single Root I/O Virtualization SR-"
"IOV combines the benefits of the aforementioned techniques&mdash;performance "
"and the ability to share a device with several &vmguest;s. SR-IOV requires "
"special I/O devices, that are capable of replicating resources so they "
"appear as multiple separate devices. Each such <quote>pseudo</quote> device "
"can be directly used by a single guest. However, for network cards for "
"example the number of concurrent queues that can be used is limited, "
"potentially reducing performance for the &vmguest; compared to "
"paravirtualized drivers. On the &vmhost;, SR-IOV must be supported by the I/"
"O device, the CPU and chipset, the BIOS/EFI and the hypervisor&mdash;for "
"setup instructions see <xref linkend=\"sec.libvirt.config.pci\"/>."
msgstr ""

#. Tag: title
#: vt_io.xml:143
#, no-c-format
msgid "Requirements for VFIO and SR-IOV"
msgstr ""

#. Tag: para
#: vt_io.xml:144
#, no-c-format
msgid ""
"To be able to use the VFIO and SR-IOV features, the &vmhost; needs to "
"fulfill the following requirements:"
msgstr ""

#. Tag: para
#: vt_io.xml:150
#, no-c-format
msgid "IOMMU needs to be enabled in the BIOS/EFI."
msgstr ""

#. Tag: para
#: vt_io.xml:155
#, no-c-format
msgid ""
"For Intel CPUs, the Kernel parameter <literal>intel_iommu=on</literal> needs "
"to be provided on the Kernel command line. For more information, see <xref "
"linkend=\"sec.grub2.yast2.config.advanced.tab2\"/>."
msgstr ""

#. Tag: para
#: vt_io.xml:162
#, no-c-format
msgid ""
"The VFIO infrastructure needs to be available. This can be achieved by "
"loading the Kernel module <systemitem class=\"resource\">vfio_pci</"
"systemitem>. For more information, see <xref linkend=\"sec.boot.systemd."
"advanced.kernel_modules\"/>."
msgstr ""
